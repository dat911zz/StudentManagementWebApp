@{
    ViewBag.Title = "Phòng Chat";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}
<link rel="stylesheet" href="~/Content/Customs/ChatHub.css">

<div class="container mb-5">
    <div class="cs-bg-1 p-2 text-white">
        <h2 class="mt-4 text-center">Kênh Chat nội bộ</h2>
        <h4 class="mt-2 text-center">(Tin nhắn sẽ không lưu lại nhằm đảm bảo tính bí mật)</h4>
    </div>
    <div id="discussion">
    </div>
    <div class="chatControl mb-4">
        <input type="text" id="message" placeholder="Nhập tin nhắn ..." />
        @*<input type="button" id="sendmessage" value="Gửi" />*@
        <input type="hidden" id="displayname" />
    </div>
</div>


<!--Script references. -->
@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/he/1.2.0/he.min.js"
            integrity="sha512-PEsccDx9jqX6Dh4wZDCnWMaIO3gAaU0j46W//sSqQhUQxky6/eHZyeB3NrXD2xsyugAKd4KPiDANkcuoEa2JuA=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer">
    </script>
    <script type="text/javascript">
        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            //console.log(chat);

            // Get the user name and store it to prepend to messages.
            //$('#displayname').val(prompt('Enter your name:', ''));

            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                //$('#sendmessage').click(function () {
                //    sendMsg();
                //});
                $('#message').on('keyup', function (e) {
                    if (e.key === 'Enter' || e.keyCode === 13) {
                        sendMsg();
                    }
                });
            });
            // Message-sender function
            function sendMsg() {
                // Call the Send method on the hub.
                //var name = $('#displayname').val();
                @{
                    var authCookies = HttpContext.Current.Request.Cookies[FormsAuthentication.FormsCookieName];
                    FormsAuthenticationTicket authTicket = FormsAuthentication.Decrypt(authCookies.Value);
                }
                var name = he.decode('@authTicket.Name');
                var msg = $('#message').val();
                console.log("[user: " + name + "]: " + msg);
                if ($('#message').val() != '') {
                    chat.server.send(name, msg);
                }
                // Clear text box and reset focus for next comment.
                $('#message').val('').focus();
                /*autoScrollBottom();*/

            }
            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message) {
                // Add the message to the page.
                var time = new Date().toLocaleString().replace(',', '').split(' ');

                $('#discussion').append('<div class="ds-container"><span class="u-name">' + htmlEncode(name)
                    + '</span><span class="u-time text-muted ml-4">' + time[0] + '</span></br><span class="u-msg">' + htmlEncode(message) + '</span></div>'


                );
                //Auto scroll when newMessage arrived

                autoScrollBottom();
                //const newMessage = document.getElementById("discussion").lastElementChild;
                //newMessage.scrollIntoView({
                //    behavior: 'smooth',
                //    block: 'end',
                //    inline: 'nearest',
                //});
            };
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
        //Auto scroll to bottom
        const autoScrollBottom = () => {
            const msg = document.getElementById("discussion");

            const lastMsg = msg.lastElementChild;

            const lastMsgStyles = getComputedStyle(lastMsg);
            const lastMsgMargin = parseInt(lastMsgStyles.marginBottom);
            const lastMsgHeight = lastMsg.offsetHeight + lastMsgMargin;



            // Visible height
            const visibleHeight = msg.offsetHeight;

            // Height of messages container
            const containerHeight = msg.scrollHeight;

            // How far have I scrolled?
            const scrollOffset = msg.scrollTop + visibleHeight;

            if (containerHeight - lastMsgHeight <= scrollOffset) {
                msg.scrollTop = msg.scrollHeight;
            }
        };

        /*============ Count time + Auto logout when user inactive ==============*/
        @{
            TimeSpan time = @authTicket.Expiration - DateTime.Now;
            var at_time = @authTicket.Expiration;
        }
        console.log('@time');
        function msToTime(duration) {
            var milliseconds = parseInt((duration % 1000) / 100),
                seconds = Math.floor((duration / 1000) % 60),
                minutes = Math.floor((duration / (1000 * 60)) % 60),
                hours = Math.floor((duration / (1000 * 60 * 60)) % 24);

            hours = (hours < 10) ? "0" + hours : hours;
            minutes = (minutes < 10) ? "0" + minutes : minutes;
            seconds = (seconds < 10) ? "0" + seconds : seconds;

            return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
        }
        var tick = new Date(@at_time.Year, @at_time.Month, @at_time.Day, @at_time.Hour, @at_time.Minute, @at_time.Second);
        //window.setInterval(function () {
        //    console.log(msToTime(tick.getTime() - new Date().getTime()));
        //}, 1000);
        onInactive(20 * 60 * 1000, function () {
            $.get('/Chat/Index', function (result) {
                // TODO: use the results returned from your controller action
                // to update the UI
                alert("Hệ thống đăng xuất tự động vì không hoạt động quá 20p");
                location.assign("/Authentication/Logout");
            });
        });
        function onInactive(ms, cb) {
            console.log('Countdown Activated!');
            var wait = setTimeout(cb, ms);
            document.onmousemove = document.mousedown = document.mouseup = document.onkeydown = document.onkeyup = document.focus = function () {
                clearTimeout(wait);
                wait = setTimeout(cb, ms);
            };
        }
    </script>
}